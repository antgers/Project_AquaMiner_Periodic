{
    "collab_server" : "",
    "contents" : "### Version Periodic (Sampling To Sampling) Datasets\n#\n# Created: 09/06/2016\n# Last Modified: 06/10/2016\n#\n# Author: Gerasimos Antzoulatos (i2s)\n#-------------------------------------------------------------\n#\n# load packages\n#\nlibrary(\"shiny\")\nlibrary(\"shinyFiles\")\nlibrary(\"shinyBS\")\nlibrary(\"shinydashboard\")\nlibrary(\"lubridate\")\nlibrary(\"htmltools\")\nlibrary(\"d3heatmap\")\nlibrary(\"DT\") \nlibrary(\"rpivotTable\") #devtools::install_github(\"smartinsightsfromdata/rpivotTable\")\nlibrary(\"htmlwidgets\")\nlibrary(\"RColorBrewer\") \nlibrary(\"readxl\") \nlibrary(\"xlsx\")\nlibrary(\"XLConnect\")\nlibrary(\"graphics\")\nlibrary(\"ggplot2\")\nlibrary(\"plotly\")\nlibrary(\"scales\")\nlibrary(\"ggthemr\") # devtools::install_github('ggthemr', 'cttobin')\nlibrary(\"ggthemes\")\nlibrary(\"extrafont\")\nlibrary(\"lattice\")\nlibrary(\"mgcv\")\nlibrary(\"plotrix\")\nlibrary(\"psych\")\nlibrary(\"plyr\")\nlibrary(\"dplyr\")\nlibrary(\"tidyr\")\nlibrary(\"reshape\")\nlibrary(\"GGally\")\nlibrary(\"e1071\")\nlibrary(\"caret\")\nlibrary(\"mboost\")\nlibrary(\"earth\")\nlibrary(\"pROC\")\nlibrary(\"glmnet\")\nlibrary(\"rpart\")\nlibrary(\"party\")\nlibrary(\"rpart.plot\")\nlibrary(\"partykit\")\nlibrary(\"Hmisc\")\nlibrary(\"effects\")\nlibrary(\"car\")\nlibrary(\"relaimpo\")\nlibrary(\"ROCR\")\nlibrary(\"kernlab\")\nlibrary(\"fpc\")\nlibrary(\"randomForest\")\nlibrary(\"maptree\")\nlibrary(\"nlme\")\nlibrary(\"dimple\") #devtools::install_github(\"Bart6114/dimple\")\nlibrary(\"wordcloud\")\n\n\n\n# ------------------------------------------------------------------------\n# Create the dataset\n# ------------------------------------------------------------------------\ncreate.dataset <- function(dataset){\n  \n  ds.names <- names(dataset)\n  \n  if (\"Region\" %in% ds.names){ data <- data.frame(\"Region\" = dataset$Region) }\n  if (\"Site\" %in% ds.names){ data <- cbind( data, \"Site\" = dataset$Site) }\n  if (\"Unit\" %in% ds.names){ data <- cbind( data, \"Unit\" = dataset$Unit) }\n  if (\"Batch\" %in% ds.names){ data <- cbind( data, \"Batch\" = dataset$Batch) }\n  if (\"Species\" %in% ds.names){ data <- cbind( data, \"Species\" = dataset$Species) } \n  if (\"Start.Fish.Density\" %in% ds.names){ data <- cbind( data, \"Start.Fish.Density\" = dataset$Start.Fish.Density) }\n  if (\"End.Fish.Density\" %in% ds.names){ data <- cbind( data, \"End.Fish.Density\" = dataset$End.Fish.Density) }\n  if (\"Hatchery\" %in% ds.names){ data <- cbind( data, \"Hatchery\"  = dataset$Hatchery) }\n  if (\"Lot.Quality\" %in% ds.names){data <- cbind( data, \"Lot.Quality\" = as.character(dataset$Lot.Quality)) }\n  if (\"Origin.Year\" %in% ds.names){data <- cbind( data, \"Origin.Year\" = as.character(dataset$Origin.Year)) }\n  if (\"Origin.Month\" %in% ds.names){data <- cbind( data, \"Origin.Month\" = dataset$Origin.Month) }\n  if (\"From\" %in% ds.names){data <- cbind( data, \"From\"= ymd(as.Date(dataset$From, origin=\"1899-12-30\")) ) }\n  if (\"From\" %in% ds.names){ data <- cbind( data, \"From.Month\" = as.character(month(dataset$From, label = TRUE, abbr = FALSE)) ) } \n  if (\"From\" %in% ds.names){ data <- cbind( data, \"From.Year\" = as.character(year(dataset$From)) ) }\n  if (\"To\" %in% ds.names){ data <- cbind( data, \"To\" = ymd(as.Date(dataset$To, origin=\"1899-12-30\")) ) }\n  if (\"To\" %in% ds.names){ data <- cbind( data, \"To.Month\" = as.character(month(dataset$To, label = TRUE, abbr = FALSE)) ) }\n  if (\"To\" %in% ds.names){ data <- cbind( data, \"To.Year\" = as.character(year(dataset$To)) ) }\n  if ( (\"From\" %in% ds.names) & (\"To\" %in% ds.names) )\n  {\n    data <- cbind( data, \"Diff.Days\" = interval(as.Date(dataset$From, origin=\"1899-12-30\"), \n                                                as.Date(dataset$To, origin=\"1899-12-30\") )%/%days(1) )\n  }\n  if (\"Start.Av.Wt.\" %in% ds.names){ data <- cbind( data, \"Start.Av.Weight\" = round(dataset$Start.Av.Wt., digits = 2) ) }\n  if (\"End.Av.Wt.\" %in% ds.names){ data <- cbind( data, \"End.Av.Weight\" = round(dataset$End.Av.Wt., digits = 2) ) }\n  if ( (\"End.Av.Wt.\" %in% ds.names) & (\"Start.Av.Wt.\" %in% ds.names) ){\n    data <- cbind( data, \n                   \"Period.Av.Weight\" = round( ( dataset$End.Av.Wt. + dataset$Start.Av.Wt. )/2, digits = 2) )\n  }\n  if (\"Av.Weight.Change\" %in% ds.names){ data <- cbind( data, \"Av.Weight.Change\" = round(dataset$Av.Weight.Change, digits = 2) ) }\n  if (\"Model.End.Av.Wt.Act.Feed\" %in% ds.names){ data <- cbind( data, \"Model.End.Av.Wt.Act.Feed\" = round(dataset$Model.End.Av.Wt.Act.Feed, digits = 2) ) }\n  if (\"Av.Wt.Deviation.Perc\" %in% ds.names){ data <- cbind( data, \"Av.Wt.Deviation.Perc\" = round(dataset$Av.Wt.Deviation.Perc, digits = 2) ) }\n  if (\"Av.Wt.Before.Sampl.\" %in% ds.names){ data <- cbind( data, \"Av.Wt.Before.Sampl\" = round(dataset$Av.Wt.Before.Sampl., digits = 2) ) }\n  if (\"Model.End.Av.Wt.Sugg.Feed\" %in% ds.names){ data <- cbind( data, \"Model.End.Av.Wt.Sugg.Feed\" = round(dataset$Model.End.Av.Wt.Sugg.Feed, digits = 2) ) }\n  if (\"Actual.Feed\" %in% ds.names){ data <- cbind( data, \"Actual.Feed\" = dataset$Actual.Feed ) }\n  if (\"Feed.Category\" %in% ds.names){ data <- cbind( data, \"Feed.Category\" = dataset$Feed.Category ) }\n  if (\"Supplier\" %in% ds.names){ data <- cbind( data, \"Supplier\" = dataset$Supplier ) }\n  if (\"Proteins.Avg.Perc\" %in% ds.names){ data <- cbind( data, \"Proteins.Avg.Perc\" = round(dataset$Proteins.Avg, digits = 2) ) }\n  if (\"Lipids.Avg.Perc\" %in% ds.names){ data <- cbind( data, \"Lipids.Avg.Perc\" = round(dataset$Lipids.Avg, digits = 2) ) }\n  if (\"Gross.Energy\" %in% ds.names){ data <- cbind( data, \"Gross.Energy\" = round(dataset$Gross.Energy, digits = 2) ) }\n  if (\"Digestive.Energy\" %in% ds.names){ data <- cbind( data, \"Digestive.Energy\" = round(dataset$Digestive.Energy, digits = 2) ) }\n  if ( (\"Digestive.Energy\" %in% ds.names) & (\"Period.Feed.Qty\" %in% ds.names) ){\n      data <- cbind( data, \"Period.Feed.Energy\" = round(dataset$Digestive.Energy * dataset$Period.Feed.Qty, digits = 2) ) \n  }\n  if (\"Period.Feed.Qty\" %in% ds.names){ data <- cbind( data, \"Period.Feed.Qty\"= round(dataset$Period.Feed.Qty, digits = 2) ) }\n  if (\"Model.Feed.Qty\" %in% ds.names){ data <- cbind( data, \"Model.Feed.Qty\" = round(dataset$Model.Feed.Qty, digits = 2) ) }\n  if (\"Feed.Deviation.Perc\" %in% ds.names){ data <- cbind( data, \"Feed.Deviation.Perc\" = round(dataset$Feed.Deviation.Perc, digits = 2) ) }\n  if (\"Opening.Fish.No\" %in% ds.names){ data <- cbind( data, \"Opening.Fish.No\" =  dataset$Opening.Fish.No ) } \n  if (\"Opening.Biomass\" %in% ds.names){ data <- cbind( data, \"Opening.Biomass\" =  round(dataset$Opening.Biomass, digits = 2) ) }\n  if (\"Closing.Fish.No\" %in% ds.names){ data <- cbind( data, \"Closing.Fish.No\" =  dataset$Closing.Fish.No ) }\n  if (\"Closing.Biomass\" %in% ds.names){ data <- cbind( data, \"Closing.Biomass\" =  round(dataset$Closing.Biomass, digits = 2) ) }\n  if (\"Harvest.Biomass\" %in% ds.names){ data <- cbind( data, \"Harvest.Biomass\" =  round(dataset$Harvest.Biomass, digits = 2) ) }\n  if (\"Transfer.Minus.Kg\" %in% ds.names){ data <- cbind( data, \"Transfer.Minus.Kg\" = round(dataset$Transfer.Minus.Kg, digits = 2) ) }\n  if (\"Transfer.Plus.Kg\" %in% ds.names){ data <- cbind( data, \"Transfer.Plus.Kg\" = round(dataset$Transfer.Plus.Kg, digits = 2) ) }\n  if (\"Biomass.Produced\" %in% ds.names){ data <- cbind( data, \"Biomass.Produced\" = round(dataset$Biomass.Produced, digits = 2) ) }\n  if (\"Biomass.Produced.Before.Sampl.\" %in% ds.names){ data <- cbind( data, \"Biomass.Produced.Before.Sampl\" = round(dataset$Biomass.Produced.Before.Sampl., digits = 2) ) }\n  if (\"Biol.FCR.Period\" %in% ds.names){ data <- cbind( data, \"Biol.FCR.Period\" = round(dataset$\"Biol.FCR.Period\", digits = 2) ) }\n  if (\"Econ.FCR.Period\" %in% ds.names){ data <- cbind( data, \"Econ.FCR.Period\" = round(dataset$Econ.FCR.Period, digits = 2) ) }\n  if (\"Econ.FCR.Period.Before.Sampl.\" %in% ds.names){ data <- cbind( data, \"Econ.FCR.Period.Before.Sampl\" = round(dataset$Econ.FCR.Period.Before.Sampl., digits = 2) ) }\n  if (\"Mortality.No\" %in% ds.names){ data <- cbind( data, \"Mortality.No\" = dataset$Mortality.No ) }\n  if (\"LTD.Mortality.Kg\" %in% ds.names){ data <- cbind( data, \"LTD.Mortality.Kg\" = round(dataset$\"LTD.Mortality.Kg\", digits = 2) ) }\n  if (\"Model.Mortality.No\" %in% ds.names){ data <- cbind( data,\"Model.Mortality.No\" = dataset$Model.Mortality.No ) }\n  if (\"Mortality.Deviation.Perc\" %in% ds.names){ data <- cbind( data, \"Mortality.Deviation.Perc\" = round(dataset$Mortality.Deviation.Perc, digits = 2) ) }\n  if ((\"Mortality.No\" %in% ds.names) & (\"Opening.Fish.No\" %in% ds.names)){\n        data <- cbind( data, \"Mortality.Perc\" = round(dataset$Mortality.No*100/dataset$Opening.Fish.No, digits = 2) ) }\n  if (\"SFR.Period.Perc\" %in% ds.names){ data <- cbind( data,\"SFR.Period.Perc\" = round(dataset$SFR.Period.Perc, digits = 2) ) }\n  if (\"SFR.Period.Perc.Before.Sampl.\" %in% ds.names){ data <- cbind( data,\"SFR.Period.Perc.Before.Sampl\" = round(dataset$SFR.Period.Perc.Before.Sampl., digits = 2) ) }\n  if (\"SGR.Period.Perc\" %in% ds.names){ data <- cbind( data,\"SGR.Period.Perc\" = round(dataset$SGR.Period.Perc, digits = 2) ) }\n  if (\"FCR.bio.*.SGR\" %in% ds.names){ data <- cbind( data,\"FCR.bio.*.SGR\" = round(dataset$\"FCR.bio.*.SGR\", digits = 2) ) }\n  if (\"Growth.Per.Day\" %in% ds.names){ data <- cbind( data,\"Growth.Per.Day\" = round(dataset$\"Growth.Per.Day\", digits = 2) ) }\n  if ( (\"End.Av.Wt.\" %in% ds.names) & (\"Start.Av.Wt.\" %in% ds.names) & (\"Period.Day.Degrees\" %in% ds.names) ){\n    data <- cbind( data, \n                   \"TGC.Period\" = round( ( dataset$End.Av.Wt.^(1/3) - dataset$Start.Av.Wt.^(1/3) )*1000 / dataset$Period.Day.Degrees, digits = 2) )\n  }\n  if (\"Avg.Temp.\" %in% ds.names){ data <- cbind( data,\"Avg.Temp\" = round(dataset$Avg.Temp., digits = 2) ) }\n  if (\"Avg.Oxygene\" %in% ds.names){ data <- cbind( data,\"Av.Oxygene\" = round(dataset$Avg.Oxygene, digits = 2) ) }\n  if (\"Period.Day.Degrees\" %in% ds.names){ data <- cbind( data,\"Period.Day.Degrees\" = dataset$Period.Day.Degrees ) }\n  if (\"Start.Av.Weight.Category\" %in% ds.names){ data <- cbind( data,\"Start.Av.Weight.Category\" = dataset$\"Start.Av.Weight.Category\" ) }\n  if (\"End.Av.Weight.Category\" %in% ds.names){ data <- cbind( data,\"End.Av.Weight.Category\" = dataset$\"End.Av.Weight.Category\" ) } \n  if (\"Max.Feed.Qty\" %in% ds.names){ data <- cbind( data,\"Max.Feed.Qty\" = round(dataset$Max.Feed.Qty, digits = 2) ) }\n  if (\"Food.Price\" %in% ds.names){ data <- cbind( data,\"Food.Price\" = round(dataset$Food.Price, digits = 2) ) }\n  if (\"Current.Grading\" %in% ds.names){ data <- cbind( data,\"Current.Grading\" = as.character(dataset$Current.Grading) ) }\n  if (\"Feeding.Policy\" %in% ds.names){ data <- cbind( data,\"Feeding.Policy\" = dataset$Feeding.Policy ) }\n  if (\"Group.Tag\" %in% ds.names){ data <- cbind( data,\"Group.Tag\" = dataset$Group.Tag ) }\n  if (\"Vaccinated\" %in% ds.names){ data <- cbind( data,\"Vaccinated\" = dataset$Vaccinated ) }\n  if (\"Feeder\" %in% ds.names){ data <- cbind( data,\"Feeder\" = as.character(dataset$Feeder) ) }\n  if (\"Feeding.Rate.Kg.per.Hour\" %in% ds.names){ data <- cbind( data,\"Feeding.Rate.Kg.Per.Hour\" = round(dataset$Feeding.Rate.Kg.per.Hour, digits = 2) ) }\n  if (\"Fastings.No\" %in% ds.names){ data <- cbind( data,\"Fastings.No\" = dataset$Fastings.No ) }\n  if (\"Transfer.Minus.No\" %in% ds.names){ data <- cbind( data,\"Transfer.Minus.No\" = dataset$Transfer.Minus.No ) }\n  if (\"Transfer.Plus.No\" %in% ds.names){ data <- cbind( data,\"Transfer.Plus.No\" = dataset$Transfer.Plus.No ) }\n  if (\"Harvest.No\" %in% ds.names){ data <- cbind( data,\"Harvest.No\" = dataset$Harvest.No ) }\n  if (\"Sampling.No\" %in% ds.names){ data <- cbind( data,\"Sampling.No\" = dataset$Sampling.No ) }\n  if (\"LTD.Econ.FCR\" %in% ds.names){ data <- cbind( data,\"LTD.Econ.FCR\" = round(dataset$LTD.Econ.FCR, digits = 2) ) }\n  if (\"LTD.Mortality.No\" %in% ds.names){ data <- cbind( data,\"LTD.Mortality.No\" = round(dataset$LTD.Mortality.No, digits = 2) ) }\n  if (\"LTD.Mortality.Perc\" %in% ds.names){ data <- cbind( data,\"LTD.Mortality.Perc\" = round(dataset$LTD.Mortality.Perc, digits = 2) ) }\n  if (\"LTD.Adjustment.No\" %in% ds.names){ data <- cbind( data,\"LTD.Adjustment.No\" = round(dataset$LTD.Adjustment.No, digits = 2) ) }\n  if (\"LTD.Adjustment.Perc\" %in% ds.names){ data <- cbind( data,\"LTD.Adjustment.Perc\" = round(dataset$LTD.Adjustment.Perc, digits = 2) ) }\n  if (\"LTD.Adjustment.&.Mortality.No\" %in% ds.names){ data <- cbind( data,\"LTD.Adjustment.&.Mortality.No\" = round(dataset$\"LTD.Adjustment.&.Mortality.No\", digits = 2) ) }\n  if (\"LTD.Adjustment.&.Mortality.Perc\" %in% ds.names){ data <- cbind( data,\"LTD.Adjustment.&.Mortality.Perc\" = round(dataset$\"LTD.Adjustment.&.Mortality.Perc\", digits = 2) ) } \n  if (\"PRODUCT.TYPE\" %in% ds.names){ data <- cbind( data,\"PRODUCT.TYPE\" = dataset$PRODUCT.TYPE ) }\n  if (\"GROUPING.PROD.BGT\" %in% ds.names){data <- cbind( data,\"GROUPING.PROD.BGT\" = dataset$GROUPING.PROD..BGT ) }\n\n  # Filter the dataset\n  # data <- data %>% filter( (Econ.FCR.Period > 0 & Econ.FCR.Period < 50)  ) %>%\n  #                  filter( Mortality.Perc <= 100 ) %>% filter( Diff.Days >= 10 ) %>%\n  #                  filter( LTD.Econ.FCR >= 0.01 & LTD.Econ.FCR <= 100 )\n\n  return(data)\n\n}\n\n#------------------------------------------------------------------------------------------------\n#   Function create colors\n#\ncreate_colors <- function(n)\n{ \n  if ( n > 12 )\n  {\n    seq_col_pals = brewer.pal.info[brewer.pal.info$category %in% 'seq',]\n    col_vector = unlist(mapply(brewer.pal, seq_col_pals$maxcolors, rownames(seq_col_pals)))\n    cols <- sample(col_vector, n)\n  }else{\n    col_vector <- brewer.pal(12, name = 'Paired')\n    cols <- sample(col_vector, n)\n  }  \n  \n  return(cols)\n}\n\n#------------------------------------------------------------------------------------------------\n#   Function for Histograms\n#\nfun.histPlot <- function(ds, no.bins, meas, group_var, flag.facet, flag.save)  \n{\n   if ( no.bins <= 15 ){ \n      range_var = diff(range(as.numeric(ds[,meas])))/no.bins\n   }else{\n      range_var = diff(range(as.numeric(ds[,meas])))/(no.bins*0.5)\n   }\n   minx = min(as.numeric(ds[,meas])) \n   maxx = max(as.numeric(ds[,meas])) \n   brks <- round(seq(minx, maxx, range_var),digits=1)\n   \n   if (group_var!=\"None\")\n   {\n      cdf <- ddply( ds, group_var, function(df) mean(df[,meas]) )\n      colnames(cdf)<-c(group_var, \"x.means\")\n      \n      n <- length(unique(ds[,group_var]))\n      cols <- create_colors(n)\n    \n      fig.title <- paste(\"Histogram of\", meas, \"grouped by\", group_var,\"with\", no.bins, \"bins\", sep=\" \") \n      h <- ggplot(ds, aes_string(x=meas, color=group_var, fill=group_var)) +\n          geom_histogram( aes( y=..density.. ), binwidth=range_var, position=\"identity\", alpha=.85 ) +\n          scale_x_continuous(limits=c(minx, maxx), breaks=brks) + scale_fill_manual(values=cols) +  \n          geom_vline(data=cdf, aes_string(xintercept=\"x.means\", colour=group_var), linetype=\"dashed\", size=1) + \n          theme_economist(dkpanel=TRUE) + ggtitle( fig.title ) + \n          theme(axis.text.x=element_text(angle=0), legend.position=\"bottom\", \n                legend.title = element_blank(), legend.text=element_text(size=8),  \n                plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\"))\n      \n      if (flag.facet){\n        fmla <- as.formula(paste0(\"~\", group_var))  \n        h <- h + facet_wrap(fmla) #, scales=\"free\") \n      }\n      \n    }else{\n      # group_var == \"None\"\n      \n      fig.title <- paste(\"Histogram of\", meas, \"with\", no.bins, \"bins\", sep=\" \") \n      h <- ggplot(ds, aes_string(x=meas)) + geom_histogram( aes( y=..density..,fill=..count.. ), binwidth=range_var ) +\n        scale_x_continuous(limits=c(minx, maxx), breaks=brks) + scale_colour_brewer(palette=\"Set1\") +\n        geom_vline(aes_string(xintercept=mean(ds[,meas], na.rm=T)), color=\"red\", linetype=\"dashed\", size=1) +\n        theme_economist(dkpanel=TRUE) + \n        theme(axis.text.x=element_text(angle=0), legend.position=\"bottom\", legend.title = element_blank(),\n              legend.text=element_text(size=8) ) + \n        ggtitle( fig.title ) +\n        theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\"))\n    } # end if group_var\n   \n    # Save the histogram\n    if( flag.save ){\n         fig.name <- paste(\"Fig.Histograms\", meas, \"grouped by\", group_var, \"no.bins\", no.bins, Sys.Date(), \"png\", sep=\".\")\n         ggsave(fig.name, h, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n    }\n   \n    return(h)\n}\n#------------------------------------------------------------------------------------------------\n#   Function for Density Plots\n#\nfun.densPlot <- function(ds, meas, group_var, flag.facet, flag.save)  \n{\n  \n  if (group_var!=\"None\")\n  {\n    cdf <- ddply( ds, group_var, function(df) mean(df[,meas]) )\n    colnames(cdf)<-c(group_var, \"x.means\")\n    \n    n <- length(unique(ds[,group_var]))\n    cols <- create_colors(n)\n    \n    fig.title <- paste(\"Density plot of\", meas, \"grouped by\", group_var, sep=\" \") \n    \n    minx <- min(as.numeric(ds[,meas]))\n    maxx <- max(as.numeric(ds[,meas]))\n    step <- (maxx - minx)/10\n    brks <- round(seq(minx, maxx, step),digits=1)\n    \n    dp <- ggplot(ds, aes_string(x=meas, color=group_var, fill=group_var)) +\n              geom_density(size=1, alpha=0.5) +\n              scale_x_continuous(limits=c(minx,maxx), breaks=brks) +  \n              geom_vline(data=cdf, aes_string(xintercept=\"x.means\", colour=group_var), linetype=\"dashed\", \n                 size=1) + theme_economist(dkpanel=TRUE) + scale_fill_manual(values=cols) +\n              theme(axis.text.x=element_text(angle=0), legend.position=\"bottom\", \n                    legend.title = element_blank(),legend.text=element_text(size=8) ) + ggtitle( fig.title ) +\n              theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\"))\n  }else{\n    # group_var == \"None\"\n    \n    minx <- min(as.numeric(ds[,meas]))\n    maxx <- max(as.numeric(ds[,meas]))\n    step <- (maxx - minx)/10\n    brks <- round(seq(minx, maxx, step),digits=1)\n    \n    fig.title <- paste(\"Density plot of\", meas, sep=\" \") \n    dp <- ggplot(ds, aes_string(x=meas)) + geom_density(aes_string(color=meas), size=1, alpha=0.8) +\n              scale_x_continuous(limits=c(minx,maxx), breaks=brks) +\n              geom_vline(aes_string(xintercept=mean(ds[,meas], na.rm=T)), color=\"red\", linetype=\"dashed\", size=1) +\n              theme_economist(dkpanel=TRUE) +\n              theme(axis.text.x=element_text(angle=0), legend.position=\"bottom\", \n                    legend.title = element_blank(), legend.text=element_text(size=8) ) + ggtitle( fig.title ) +\n              theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\", size=6))\n  } # end if group_var\n  \n  if (group_var!=\"None\"){\n    if (flag.facet){ \n      fmla <- as.formula(paste0(\"~\", group_var))  \n      dp <- dp + facet_wrap(fmla) #, scales=\"free\")\n    }\n  }\n  \n  if( flag.save ){\n    fig.name <- paste(\"Fig.Density.Plots\", meas, \"grouped by\", group_var, \"png\", sep=\".\")\n    ggsave(fig.name, dp, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n  }\n  \n  return(dp)\n}\n\n#------------------------------------------------------------------------------------------------\n#   Function for BoxPlots\n#\nfun.boxPlot <- function(ds, meas, group_var, flag.notch, flag.facet, flag.save)  \n{\n  if (group_var!=\"None\")\n  {\n      fig.title <- paste(\"Box plot of\", meas, \"grouped by\", group_var, sep=\" \")\n      \n      n <- length(unique(ds[,group_var]))\n      cols <- create_colors(n)\n      \n      boxp <- ggplot(ds, aes_string(x=group_var, y=meas, fill=group_var)) +\n              geom_boxplot(notch = flag.notch, width=0.5) +\n              stat_summary(fun.y = mean, geom=\"point\", shape=5, size=4) +\n              theme_economist(dkpanel=TRUE) + scale_fill_manual(values=cols) +\n              theme(legend.position=\"bottom\", legend.title = element_blank(),\n                    legend.text=element_text(size=8)) + ggtitle(fig.title) +\n              theme(plot.title=element_text(family=\"Verdana\"), text=element_text(family=\"Verdana\"))\n      \n              # Rotate the boxplot if it necessary\n              if( length(unique(ds[,group_var])) >= 6 & length(unique(ds[,group_var])) <= 10)\n              {  \n                boxp <- boxp + theme(axis.text.x=element_text(angle=90)) \n              }else if( length(unique(ds[,group_var])) > 10 ){\n                boxp <- boxp + coord_flip() \n              }\n  \n  }else{\n      fig.title <- paste(\"Box plot of\", meas, sep=\" \") \n      boxp <- ggplot(ds, aes_string(x=1, y=meas)) + \n              geom_boxplot(notch = flag.notch, width=0.5) +\n              stat_summary(fun.y=mean, geom=\"point\", shape=5, size=4) +\n              theme_economist(dkpanel=TRUE) + #scale_fill_brewer(palette=\"Set1\") +\n              theme(legend.position=\"bottom\", legend.title = element_blank(),\n                    legend.text=element_text(size=8)) + \n              ggtitle(fig.title) +\n              theme(plot.title=element_text(family=\"Verdana\"), text=element_text(family=\"Verdana\"))\n  } # end if group_var\n\n  if (group_var!=\"None\"){\n    if (flag.facet){ \n      fmla <- as.formula(paste0(\"~\", group_var))  \n      boxp <- boxp + facet_wrap(fmla) #, scales=\"free\", ncol=3)\n    }\n  }\n  \n  if( flag.save ){\n    fig.name <- paste(\"Fig.BoxPlots\", meas, \"grouped by\", group_var, \"png\", sep=\".\")\n    ggsave(fig.name, boxp, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n  }\n\n  return(boxp)\n}\n\n#------------------------------------------------------------------------------------------------\n#   Function for Bar Plots\n#\nfun.barPlot <- function(ds, dimX, group_var, meas, flag.save, flag.sd.se, flag.facet)\n{\n  \n  # New version of length which can handle NA's: if na.rm==T, don't count them\n  length2 <- function (x, na.rm=FALSE) {\n    if (na.rm) sum(!is.na(x))\n    else       length(x)\n  }\n  \n  if ( meas != \"None\")\n  {\n      if (group_var == \"None\")\n      {\n        ds.ij <- ds[, c(dimX, meas)] \n        \n        summary.ds.ij <- ddply( ds.ij, dimX, .fun= function(xx,col){ \n                                                    c( Mean = mean(xx[[col]], na.rm=TRUE),\n                                                       STD = sd(xx[[col]], na.rm=TRUE),\n                                                       N = length2(xx[[col]], na.rm=TRUE))}, meas )\n        summary.ds.ij$SEM <- summary.ds.ij$STD / sqrt(summary.ds.ij$N)\n      \n        fig.title <- paste(\"Error bars\", meas, \"per\", dimX, sep=\" \")  \n        xlab <- names(summary.ds.ij)[1]\n        ylab <- names(summary.ds.ij)[2]\n        \n        if (flag.sd.se == \"St.Dev\")\n        {\n          scale_y <- ceiling(max(summary.ds.ij$Mean) + max(summary.ds.ij$STD))\n          err.bars <- ggplot(summary.ds.ij, aes_string(x = dimX, y = \"Mean\")) + \n            geom_bar(stat = \"identity\", position=\"dodge\", fill='steelblue', width=.5) +\n            geom_errorbar(aes(ymin = Mean - STD, ymax=Mean + STD), width=.25, color=\"red\") + \n            theme_economist(dkpanel=TRUE) + \n            theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n            scale_y_continuous(limits = c(0, scale_y)) + scale_fill_discrete(name=xlab)\n        }else{\n          scale_y <- ceiling(max(summary.ds.ij$Mean) + max(summary.ds.ij$SEM))\n          err.bars <- ggplot(summary.ds.ij, aes_string(x = dimX, y = \"Mean\")) + \n            geom_bar(stat = \"identity\", position=\"dodge\", fill='steelblue', width=.5) +\n            geom_errorbar(aes(ymin = Mean - SEM, ymax=Mean + SEM), width=.25, color=\"red\") + \n            theme_economist(dkpanel=TRUE) + \n            theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n            scale_y_continuous(limits = c(0, scale_y)) + scale_fill_discrete(name=xlab) \n        }  \n        \n      }else{\n        # group_var != \"None\"\n        \n        n <- length(unique(ds[,group_var]))\n        cols <- create_colors(n)\n        \n        ds.ij <- ds[, c(dimX, group_var, meas)] \n        \n        summary.ds.ij <- ddply(ds.ij, c(dimX, group_var), .fun= function(xx,col){ \n                                                              c( Mean = mean(xx[[col]], na.rm=TRUE),\n                                                                 STD = sd(xx[[col]], na.rm=TRUE),\n                                                                 N = length2(xx[[col]], na.rm=TRUE))}, meas )\n        summary.ds.ij$SEM <- summary.ds.ij$STD / sqrt(summary.ds.ij$N)\n\n        fig.title <- paste(\"Error bars\", meas, \"per\", dimX, \"grouped by\", group_var, sep=\" \")  \n        xlab <- names(summary.ds.ij)[1]\n        ylab <- names(summary.ds.ij)[3]\n        \n        if (flag.sd.se == \"St.Dev\")\n        {\n          scale_y <- ceiling(max(summary.ds.ij$Mean) + max(summary.ds.ij$STD))\n          err.bars<- ggplot(summary.ds.ij, aes_string(x=dimX, y=\"Mean\", fill=group_var)) +\n            geom_bar(position=position_dodge(0.9), stat=\"identity\", width=.5) +\n            geom_errorbar(aes(ymin=Mean-STD, ymax=Mean+STD), \n                          width=.25, position=position_dodge(0.9), color=\"darkblue\") +\n            theme_economist(dkpanel=TRUE) + # scale_colour_economist() +\n            theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n            scale_y_continuous(limits = c(0, scale_y)) + scale_fill_discrete(name=group_var) +\n            labs(x=xlab, y=ylab) + ggtitle(fig.title)\n        }else{\n          scale_y <- ceiling(max(summary.ds.ij$Mean) + max(summary.ds.ij$SEM))\n          err.bars<- ggplot(summary.ds.ij, aes_string(x=dimX, y=\"Mean\", fill=group_var)) +\n            geom_bar(position=position_dodge(0.9), stat=\"identity\", width=.5 ) +\n            geom_errorbar(aes(ymin=Mean-SEM, ymax=Mean+SEM), \n                          width=.25, position=position_dodge(0.9), color=\"darkblue\") +\n            theme_economist(dkpanel=TRUE) + # scale_colour_economist() +\n            theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n            scale_y_continuous(limits = c(0, scale_y)) + scale_fill_discrete(name=group_var) +\n            labs(x=xlab, y=ylab) + ggtitle(fig.title)\n        } # end if..else flag.sd.se   \n        \n      } # end if..else group_var\n      \n      if( length(unique(ds[,dimX])) >= 10 )\n      {\n        err.bars <- err.bars + theme(axis.text.x=element_text(angle=90)) \n      }\n   \n      if( flag.save ){\n        fig.name <- paste(\"Fig.BarPlots\", dimX, meas, \"grouped by\", group_var, \"png\", sep=\".\")\n        ggsave(fig.name, err.bars, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n      }\n  \n      return(err.bars)\n  \n  }else{\n    # meas == 'None' => create barplots or stacked barplots\n    if (group_var != \"None\")\n    {\n      ds.ij <- as.data.frame(ds[, c(dimX, group_var)])\n      names(ds.ij) <- c(dimX, group_var)\n      \n      n <- length(unique(ds[,group_var]))\n      cols <- create_colors(n)\n\n      counts.perc.ds <- ds.ij %>% group_by_( dimX, group_var ) %>% summarise(Count=n()) %>%\n                                  mutate(Percentage = round(Count*100/sum(Count),1),\n                                         pos = cumsum(Percentage) - (0.5 * Percentage))\n      names(counts.perc.ds) <- c(dimX, group_var, \"Count\", \"Percentage\",\"pos\" )\n\n      fig.title <- paste(\"Percentage of\", dimX, \"per\", group_var, sep=\" \")\n\n      bpfan <- ggplot(counts.perc.ds, aes_string(y = \"Percentage\", x = dimX, fill = group_var )) +\n                      geom_bar(stat=\"identity\", width=.5) +\n                      geom_text(aes(x = counts.perc.ds[1], y = pos, label = paste0(Percentage,\"%\")),\n                                colour=\"black\", family=\"Tahoma\", size=4) +\n                      theme_economist(dkpanel=TRUE) + scale_fill_manual(values=cols) +\n                      theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n                      scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n                      labs(x=dimX, y=\"Percentage\") + ggtitle(fig.title)\n\n      bpfan <- bpfan + theme(legend.position=\"bottom\", legend.title = element_blank(), \n                             legend.text=element_text(size=8) )\n      \n    }else{\n      # group_var = 'None'\n      ds.ij <- as.data.frame(ds[, dimX])\n      names(ds.ij) <- c(dimX)\n        \n      counts.perc.ds <- ds.ij %>% group_by_( dimX ) %>% summarise(Count=n()) %>%\n                                   mutate(Percentage = round(Count*100/sum(Count),1),\n                                          pos = Percentage - (0.5 * Percentage))\n \n      names(counts.perc.ds) <- c(dimX, \"Count\", \"Percentage\",\"pos\" )\n      \n      fig.title <- paste(\"Percentage of\", dimX, sep=\" \")\n\n      bpfan <- ggplot(counts.perc.ds, aes_string(y = \"Percentage\", x = dimX)) + \n                        geom_bar(stat=\"identity\", width =.5, fill='steelblue') +\n                        geom_text(aes(x = counts.perc.ds[1], y = pos, label = paste0(Percentage,\"%\")),\n                                  colour=\"black\", family=\"Tahoma\", size=4) +\n                        theme_economist(dkpanel=TRUE) + # scale_fill_brewer(palette=\"Set1\") +\n                        theme(plot.title=element_text(family=\"Tahoma\"), text=element_text(family=\"Tahoma\")) +\n                        scale_y_continuous(labels = dollar_format(suffix = \"%\", prefix = \"\")) +\n                        labs(x=dimX, y=\"Percentage\") + ggtitle(fig.title)\n        \n      bpfan <- bpfan + theme(legend.position=\"bottom\", legend.title = element_blank(), \n                             legend.text=element_text(size=8) )\n    } # end if...else group_var\n    \n    if( length(unique(ds[,dimX])) >= 10 )\n    {\n      bpfan <- bpfan + theme(axis.text.x=element_text(angle=90)) \n    }\n    \n    if( flag.save ){\n      fig.name <- paste(\"Fig.BarPlots\", dimX,\"grouped by\", group_var, \"png\", sep=\".\")\n      ggsave(fig.name, bpfan, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n    }\n    return(bpfan)\n    \n    \n  } # end if..else meas\n  \n}\n\n#------------------------------------------------------------------------------------------------\n#   Function for Scatter plots\n#\nfun.scatterPlot <- function(ds, dimX, dimY, Size, group_var, regr.method, flag.save)\n{\n  \n  if (group_var == \"None\")\n  {\n        fig.title <- paste(\"Scatter plot of\", dimX, \"VS\", dimY, sep=\" \")\n        scp <- ggplot(ds, aes_string(x=dimX, y=dimY, size=Size)) +\n               geom_point(shape = 21) +\n               scale_size_area(max_size = 15) + \n               scale_x_continuous(name=dimX) + scale_y_continuous(name=dimY) +\n               theme_economist(dkpanel=TRUE) + ggtitle(fig.title) + scale_fill_brewer(palette=\"Set1\")\n               theme(legend.position = \"bottom\", legend.direction = \"horizontal\",\n                     legend.box = \"horizontal\",\n                     legend.key.size = unit(1, \"cm\"), \n                     axis.line.x = element_line(size=1, colour = \"black\", linetype=1),\n                     plot.title = element_text(family=\"Tahoma\"),\n                     text = element_text(family = \"Tahoma\"),\n                     axis.title = element_text(size = 12),\n                     legend.text = element_text(size = 9),\n                     legend.title = element_text(face = \"bold\", size = 9))  \n        \n        # Add regression line       \n        if ( regr.method != \"None\" ){       \n            scp <- scp + geom_smooth(method = regr.method, size = 1)\n        } \n               \n  }else{\n        n <- length(unique(ds[,group_var]))\n        cols <- create_colors(n)\n    \n        fig.title <- paste(\"Scatter plot of\", dimX, \"VS\", dimY, \"per\", group_var, sep=\" \")\n        scp <- ggplot(ds, aes_string(x=dimX, y=dimY, color=group_var, size=Size, fill=group_var)) +  #, fill=group_var, size=group_var\n               geom_point(shape = 21) + scale_size_area(max_size = 15) + \n               scale_x_continuous(name=dimX) + scale_y_continuous(name=dimY) +\n               theme_economist(dkpanel=TRUE) + scale_fill_manual(values=cols) +\n               ggtitle(fig.title) +\n               theme(legend.position = \"bottom\", legend.direction = \"horizontal\",\n                      legend.box = \"horizontal\",\n                      legend.key.size = unit(1, \"cm\"), \n                      axis.line.x = element_line(size=1, colour = \"black\", linetype=1),\n                      plot.title = element_text(family=\"Tahoma\"),\n                      text = element_text(family = \"Tahoma\"),\n                      axis.title = element_text(size = 12),\n                      legend.text = element_text(size = 9),\n                      legend.title = element_text(face = \"bold\", size = 9)) \n        \n        # Add regression line       \n        if ( regr.method != \"None\" ){       \n          scp <- scp + geom_smooth(method = regr.method, size = 1)\n        } \n       \n    }\n    \n    if( flag.save ){\n      fig.name <- paste(\"Fig.ScatterPlots\", dimX, \"VS\", dimY, \"grouped by\", group_var, \"png\", sep=\".\")\n      ggsave(fig.name, scp, type=\"cairo-png\", width = 20.29, height = 10.58, units=\"cm\")\n    }\n  \n  return(scp)\n  \n} \n\n#----------------------------------------------------------------------------------\n##                 Summary Mutlivariate Statistics function\n##\n## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).\n##   data: a data frame.\n##   measurevar: the name of a column that contains the variable to be summariezed\n##   groupvars: a vector containing names of columns that contain grouping variables\n##   na.rm: a boolean that indicates whether to ignore NA's\n##   conf.interval: the percent range of the confidence interval (default is 95%)\n##\nsum_stats <- function(data, measurevar, groupvars, na.rm=FALSE, conf.interval=.95, .drop=TRUE, flag.save)\n{\n  \n  if ( groupvars != \"None\" ){\n    \n    # New version of length which can handle NA's: if na.rm==T, don't count them\n    length2 <- function (x, na.rm=FALSE) {\n      if (na.rm) sum(!is.na(x))\n      else       length(x)\n    }\n    \n    # This does the summary. For each group's data frame, return a vector with\n    # N, min, max, mean, median, sd, CV, kurtosis, skewness, Q1, Q3, IR, se and ci\n    data_stats <- ddply(data, groupvars, .drop=.drop,\n                        .fun = function(xx, col) {\n                          c(N      = length2(xx[[col]], na.rm=na.rm),\n                            min    = min(xx[[col]], na.rm=na.rm),\n                            max    = max(xx[[col]], na.rm=na.rm),\n                            mean   = mean(xx[[col]], na.rm=na.rm),\n                            median = median(xx[[col]], na.rm=na.rm),\n                            sd     = sd(xx[[col]], na.rm=na.rm),\n                            CV     = ( sd(xx[[col]], na.rm=na.rm)/mean(xx[[col]], na.rm=na.rm) )*100,\n                            kurtosis = kurtosis(xx[[col]], na.rm=na.rm),\n                            skewness = skewness(xx[[col]], na.rm=na.rm),\n                            Q1       = quantile(xx[[col]], 1/4, na.rm=na.rm, names=FALSE),\n                            Q3       = quantile(xx[[col]], 3/4, na.rm=na.rm, names=FALSE),\n                            IR       = IQR(xx[[col]], na.rm=na.rm)\n                          )\n                        },\n                        measurevar\n    )\n \n    data_stats$se <- data_stats$sd / sqrt(data_stats$N)  # Calculate standard error of the mean\n    \n    # Confidence interval multiplier for standard error\n    # Calculate t-statistic for confidence interval: \n    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1\n    ciMult <- qt(conf.interval/2 + .5, data_stats$N-1)\n    data_stats$ci <- data_stats$se * ciMult\n    \n  }else{\n    \n    # This does the summary for all records of the data set at the variable measurevar \n    # N, min, max, mean, median, sd, CV, kurtosis, skewness, Q1, Q3, IR, se and ci\n    \n    ds <- data[,measurevar]\n    data_stats <- data.frame(N     = length(ds),\n                             min   = min(ds, na.rm=na.rm),\n                             max    = max(ds, na.rm=na.rm),\n                             mean   = mean(ds, na.rm=na.rm),\n                             median = median(ds, na.rm=na.rm),\n                             sd     = sd(ds, na.rm=na.rm),\n                             CV     = ( sd(ds, na.rm=na.rm)/mean(ds, na.rm=na.rm) )*100,\n                             kurtosis = kurtosis(ds, na.rm=na.rm),\n                             skewness = skewness(ds, na.rm=na.rm),\n                             Q1       = quantile(ds, 1/4, na.rm=na.rm, names=FALSE),\n                             Q3       = quantile(ds, 3/4, na.rm=na.rm, names=FALSE),\n                             IR       = IQR(ds, na.rm=na.rm)\n    )\n    \n    \n    data_stats$se <- data_stats$sd / sqrt(data_stats$N)  # Calculate standard error of the mean\n    \n    # Confidence interval multiplier for standard error\n    # Calculate t-statistic for confidence interval: \n    # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1\n    ciMult <- qt(conf.interval/2 + .5, data_stats$N-1)\n    data_stats$ci <- data_stats$se * ciMult\n    \n    rownames(data_stats)<-\"Total\"\n    \n  }\n  \n  return(data_stats)\n  \n}\n#----------------------------------------------------------------------------------",
    "created" : 1472549714843.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "530442788",
    "id" : "516DF56F",
    "lastKnownWriteTime" : 1476641355,
    "last_content_update" : 1476641355221,
    "path" : "D:/Windows_Workspace/R_projects/Project_DataMining_Aquaculture/Project_Galaxidi/DM_Aqua_Project_Periodic_Galaxidi/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}