{
    "collab_server" : "",
    "contents" : "### Version Periodic (Sampling To Sampling) Datasets\n#\n# Created: 30/08/2016\n# Last Modified: 06/10/2016\n#\n# Author: Gerasimos Antzoulatos (i2s)\n#\n\nsource(\"helpers.R\")\nsource(\"SidebarUi.R\")\n\n#----------------------------------------------------\n# \nshinyUI( \n\n  navbarPage( theme = \"bootstrap.css\", \n              img(src=\"Aquamanager-logo.png\", class = \"img-responsiveLogo\"), #align = 'top',\n#            \"AquaSmart\",\n \n#---------------------------------------------------------- First MenuPage -- Descriptive Statistics\n              tabPanel(\" Descriptive Statistics \", id=\"MenuPage_1\",\n                       fluidPage( theme = \"bootstrap.css\",\n                                  \n                                  tags$head(tags$script(src=\"script2.js\")),\n                                  actionLink(inputId = \"showHideButtonForMenu\", label=\"\", icon = icon(\"filter\", lib = \"glyphicon\")),\n                                  \n                                  sidebarLayout(\n                                  \n                                    sidebarUni,\n                                    mainPanel( \n                                      \n                                     tabsetPanel(\n                                        tabPanel(\"Dataset\", \n                                            h4(\"Initial dataset:\"),     \n                                            DT::dataTableOutput(\"dataset\"),\n                                            hr(),\n                                            h4(\"Final dataset:\"),\n                                            DT::dataTableOutput(\"preproc.dataset\") #,\n                                          #  downloadButton('downloadData', 'Download')\n                                        ), # end tabPanel\n                                        tabPanel(\"Line Plots\", \n                                          fluidRow(\n                                                  column(3, uiOutput(\"line.DimX\")),\n                                                  column(3, uiOutput(\"line.group.Batch\")),\n                                                  column(3, uiOutput(\"line.group.Unit\")),\n                                                  br(),\n                                                  column(3, actionButton(inputId = 'View.Lines',  label = 'View...'))\n                                          ), #end fluidRow\n                                          br(),\n                                          plotlyOutput(\"line_plots\")\n                                          \n                                        ),\n                                        tabPanel(\"Histogram\", \n                                            fluidRow(\n                                                   column(3,\n                                                          sliderInput('numbins', 'Number of Bins:', \n                                                                      min=1, max=50, value=10, step=1) #,\n                                                        #  checkboxInput('houtlier', 'Remove outliers')\n                                                   ),\n                                                   column(3, \n                                                          uiOutput(\"hist.group\"),\n                                                          conditionalPanel(\n                                                              condition = \"input.hgroup != 'None'\",\n                                                              checkboxInput('chkb.hfacet', 'Facets'))\n                                                   ),\n                                                   column(3, \n                                                          uiOutput(\"hist.measures\")\n                                                   ),\n                                                   column(3, \n                                                          checkboxInput('saveHPlot', \"Check to save\"),\n                                                          br(),\n                                                          actionButton(inputId = 'View.Hist',  label = 'View...'),\n                                                          br()\n                                                   ) \n                                                 ),  # end fluidRow\n                                                 br(),\n                                                 uiOutput(\"hist_plots\")\n                                                 \n                                                 #plotOutput(\"hist_plots\", height = 800, width = 800)\n                                                   \n                                        ), # end tabPanel\n                                        tabPanel(\"Density Plots\", \n                                            fluidRow(\n                                                   column(4,\n                                                          uiOutput(\"dens.group\"),\n                                                          conditionalPanel(\n                                                              condition = \"input.dgroup != 'None'\",\n                                                              checkboxInput('chkb.dfacet', 'Facets')) #,\n                                                        #  checkboxInput('doutlier', 'Remove outliers')\n                                                   ),\n                                                   column(4, \n                                                          uiOutput(\"dens.measures\")\n                                                   ),\n                                                   column(4, \n                                                          checkboxInput('saveDPlot', \"Check to save\"),\n                                                          actionButton(inputId = 'View.Dens',  label = 'View...') \n                                                   )\n                                                 ),  # end fluidRow\n                                                 br(),\n                                                 #plotOutput(\"dens_plots\", height = 800, width = 800)\n                                                 uiOutput(\"dens_plots\")  \n                                          \n                                        ), # end tabPanel\n                                        tabPanel(\"Box Plots\",\n                                            fluidRow(     \n                                                  column(4,\n                                                         uiOutput(\"boxplot.group\"),\n                                                         conditionalPanel(\n                                                              condition = \"input.bxgroup != 'None'\",\n                                                              checkboxInput('chkb.bxfacet', 'Facets'))\n                                                  ),\n                                                  column(4, \n                                                         uiOutput(\"boxplot.measures\"),\n                                                         checkboxInput('chkb.bxnotch', 'Notches') #,\n                                                      #   checkboxInput('bxoutlier', 'Remove outliers')\n                                                  ),\n                                                  column(4, \n                                                         checkboxInput('saveBoxPlot', \"Check to save\"),\n                                                         actionButton(inputId = 'View.Boxplot',  label = 'View...')\n                                                  )\n                                             ),  # end fluidRow\n                                             br(),\n                                             #plotOutput(\"box_plots\", height = 800, width = 800)         \n                                             uiOutput(\"box_plots\")    \n                                        ), # end tabPanel\n                                        tabPanel(\"Bar Plots\",\n                                            fluidRow(   \n                                              column(3,\n                                                     uiOutput(\"bar.dim\"),\n                                                     br()\n                                              ),\n                                              column(3,\n                                                     uiOutput(\"bar.meas\"),\n                                                     conditionalPanel(\n                                                       condition = \"input.barMeas != 'None'\",\n                                                       radioButtons(inputId = 'radio.sd.se', label = 'Type of error bar', \n                                                                    choices = c('St.Dev', 'SEM'), \n                                                                    selected = 'St.Dev', inline = TRUE) #,\n                                                       #checkboxInput('baroutlier', 'Remove outliers')\n                                                      ),\n                                                      br()\n                                              ),\n                                              column(3,\n                                                     uiOutput(\"bar.group\")\n                                              ),\n                                              column(3,\n                                                    checkboxInput('saveBarPlot', \"Check to save\"),\n                                                    actionButton(inputId = 'View.Barplots',  label = 'View...')\n                                              ),\n                                              br()\n                                            ),  # end fluidRow\n                                            #plotOutput(\"bar_plots\", height = 800, width = 800) \n                                            uiOutput(\"bar_plots\")\n                                        ), # end tabPanel\n                                        tabPanel(\"Scatter Plots\",\n                                                 fluidRow(     \n                                                   column(3,\n                                                          uiOutput(\"sc.dimX\"),\n                                                          radioButtons(inputId = 'method.regress', label = 'Regression line', \n                                                                       choices = c('None', 'lm', 'loess'),  \n                                                                       selected = 'None', inline = TRUE ),\n                                                          br()\n                                                   ),\n                                                   column(3,\n                                                          uiOutput(\"sc.dimY\"),\n                                                          br()\n                                                   ),\n                                                   column(3,\n                                                          uiOutput(\"sc.size\"),\n                                                          checkboxInput('saveScatterPlot', \"Check to save\"),\n                                                          br()\n                                                   ),\n                                                   column(3,\n                                                          uiOutput(\"sc.group\"),\n                                                          actionButton(inputId = 'View.Scatterplots', label = 'View...'),\n                                                          br()\n                                                   ),\n                                                   br()\n                                                 ),  # end fluidRow\n                                                 plotlyOutput(\"scatter_plots\", height = 600, width = 900) \n                                                   \n                                        ), # end tabPanel\n                                        tabPanel(\"Summary\",\n                                                 fluidRow(     \n                                                   column(4,\n                                                      uiOutput(\"sum.group\")\n                                                   ),\n                                                   column(4, \n                                                      uiOutput(\"sum.meas\")\n                                                   ),\n                                                   column(4, \n                                                      checkboxInput('saveStats', \"Save to file\"),\n                                                      actionButton(inputId = 'View.Stats', label = 'View...')\n                                                   ),\n                                                   br()\n                                                 ),  # end fluidRow\n                                                 tableOutput(\"summary_stats\")\n                                        ) # end tabPanel\n                                      ) # end tabsetPanel\n                                 ) # end mainPanel\n                                ) # end sidebarLayout\n                              ) # end fluidPage\n              ), # end tabPanel Descriptive Statistics\n\n#---------------------------------------------------------- Second MenuPage --- OLAP Cubes                \n              tabPanel(\"Pivot Table\", \n                #     rpivotTable::rpivotTableOutput('pivTable', height = \"800px\") \n                     rpivotTableOutput(\"pivotTable\", height = \"800px\") \n              ),            \n#---------------------------------------------------------- Third MenuPage --- Machine Learning         \n              tabPanel(\" Machine Learning Models \", id=\"MenuPage_2\", \n                       fluidPage( \n                         \n                        # tags$head(tags$script(src=\"script2.js\")),\n                         actionLink(inputId = \"showHideButtonForMachine\", label=\"\", icon = icon(\"filter\", lib = \"glyphicon\")),\n                         \n                         sidebarLayout(\n                         \n                           sidebarPanel(\n                             img(src=\"feedingfish1.png\",class = \"img-responsive\", align = 'middle'),\n                             hr(),\n                             uiOutput(\"targs.ML.Variables\"),\n                             hr(),\n                             uiOutput(\"preds.ML.Variables\"),\n                             hr(),\n                             selectInput(inputId='radioML.model', label=h3(\"Choose ML model...\"),\n                                         choices=list(\"Support Vector Machine (RBF Kernel)\"=1, \n                                                      \"Generalized Linear Models (Boosted GLM)\"=2,\n                                                      \"Generalized Additive Models (GAMs)\"=3,\n                                                      \"Random Forest Regression\"=4,\n                                                      \"Multivariate Adaptive Regression Spline (MARS)\"=5), \n                                         selected=1, multiple=FALSE),\n                             sliderInput(\"folds\", \"Folds:\",min = 1, max = 20, value = 10),\n                             hr(),\n                             actionButton(inputId = 'goAnalysis',  label = 'Start Analysis')\n                             \n                           ),  # end sidebarPanel \n                           mainPanel(tabsetPanel( \n                                tabPanel(\"Build the Model...\",\n                                         br(),\n                                         h4('Formula:'),\n                                         fluidRow(column(12, verbatimTextOutput(\"fmla.model\"))),\n                                         hr(),\n                                         \n                                         # fluidRow(column(12, verbatimTextOutput(\"summary_model\"))),\n                                         # hr(),\n                                         fluidRow(column(6, h4('RMSE:')), \n                                                  column(6, h4('R-Squared:'))\n                                         ),       \n                                         fluidRow(column(6, infoBoxOutput(\"approvalBox.RMSE\")),\n                                                  column(6, infoBoxOutput(\"approvalBox.Rsquare\"))\n                                         ), \n                                         hr(),\n                                         #------ relative importance\n                                         hr(),\n                                         h4('Variable Importance:'),   \n                                         fluidRow(column(12, plotlyOutput(\"plot_ML_Var_Impo\",\n                                                                          height = 600, width = 600))),\n                                         fluidRow(column(12, verbatimTextOutput(\"ML.Var.Impo\")))\n                                ), # end tabPanel Training   \n                                tabPanel(\"Evaluate the Training\",\n                                         fluidRow(column(4,\n                                                    sliderInput(\"perc\", \"Percentage of population for testing:\",\n                                                                 min = 0, max = 100, value = 10, step=0.5)\n                                                  ), # end column  \n                                                  column(4,\n                                                    sliderInput(\"thresh.RE\", \"Threshold of Relative Error:\",\n                                                                 min = 0, max = 100, value = c(0,10), step=0.5)\n                                                  ), # end column\n                                                  column(4,\n                                                    checkboxInput('saveTesting', \"Save to file\"),\n                                                    actionButton(inputId = 'ViewTesting',  label = 'View...')\n                                                  ) # end column\n                                         ), # end fluidRow\n                                         plotlyOutput(\"plot_Testing\",height = 800, width = 800),\n                                         br(),\n                                         h4('Evaluate the training ML model:'),\n                                         fluidRow(column(12, verbatimTextOutput(\"evaluate_model\")))\n                                ), # end tabPanel Testing\n                                tabPanel(\"Predict with it...\",\n                                         # predict response value using user-defined values for each predictor  \n                                         fluidRow(column(6,   \n                                                    h3(\"Set values to Predictors:\"),\n                                                    uiOutput(\"dyn_input.ML\")\n                                         ), \n                                         hr(),\n                                         column(6, \n                                                    actionButton(inputId = 'goPrediction',  label = 'Start prediction'),\n                                                    hr(),\n                                                    h3(\"Prediction with Machine Learning model...\"),\n                                                    fluidRow(column(12, verbatimTextOutput(\"prediction.value.ML\")))\n                                         ) # end column\n                                         ) # end fluidRow\n                                ) # end tabPanel Predict\n                              ) # end tabsetPanel\n                           ) # end mainPanel\n                         ) # end sidebarLayout\n                       ) # end fluidPage\n                  ),  # end tabPanel ML Models\n\n#---------------------------------------------------------- Third MenuPage --- Business Cases     \n                  tabPanel(\" KPIs Table Estimation \", id=\"MenuPage_3\",\n                          fluidPage(\n                              sidebarPanel(\n                                img(src=\"feedingfish1.png\",class = \"img-responsive\", align = 'middle'),\n                                hr(),\n                                numericInput('temp.step', 'Step of Temperature:', 1,\n                                             min = 1, max = 5, step = 0.5),\n                                hr(),\n                                numericInput('weight.step', 'Step of Weight Categories:', 50,\n                                             min = 0, max = 800, step = 10),\n                                hr(),\n                                selectInput(inputId='radioKPI', label=h3(\"Choose the KPI...\"),\n                                            choices=list(\"Biological FCR\"=1,\n                                                         \"Economical FCR\"=2,\n                                                         \"SFR\"=3,\n                                                         \"SGR\"=4,\n                                                         \"Mortality %\"=5\n                                                        ),\n                                            selected=1, multiple=FALSE),\n                               hr(),\n                               actionButton(inputId = 'ViewKPITable',  label = 'View KPI Table')\n                              ),  # end sidebarPanel\n                              mainPanel(\n                                  plotlyOutput(\"plot_3D_Table\",height = 800, width = 800),\n                                  h3(\" KPIs Table estimation by Machine Learning modeling \"),\n                                  tableOutput(\"KPI_Table\")\n                                \n                              ) # end mainPanel\n                          ) # end fluidPage\n                  ),  # end tabPanel Business Cases\n\n#---------------------------------------------------------- Forth MenuPage --- Business Cases     \n                  tabPanel(\" Methodological Approach \", id=\"MenuPage_4\",\n                           fluidPage(\n\n                               wellPanel(\n\n                                 # h2(\" Knowledge Discovery & Data Mining Process: \"),\n                                 img(src=\"KDD_DM_process.png\", class = \"img-responsive\", align = 'middle', width = 800)\n\n                              ) # end wellPanel\n                      ) # end fluidPage\n                  ),  # end tabPanel Business Cases\n\n#---------------------------------------------------------- Fifth MenuPage --- Business Cases     \n                  tabPanel(\" About \", id=\"MenuPage_5\", \n                           fluidPage( \n                            \n                               plotOutput(\"plot.buzzWords\")\n                               \n                           ) # end fluidPage\n                  )  # end tabPanel Business Cases \n\n    ) # end navbarPage\n) # end shinyUI  \n\n\n\n                                      \n                                                   \n\n                                       \n                                                   ",
    "created" : 1476606036961.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "75628084",
    "id" : "F0075F50",
    "lastKnownWriteTime" : 1476614033,
    "last_content_update" : 1476614033605,
    "path" : "D:/Windows_Workspace/R_projects/Project_DataMining_Aquaculture/Project_Galaxidi/DM_Aqua_Project_Periodic_Galaxidi/ui.R",
    "project_path" : "ui.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}